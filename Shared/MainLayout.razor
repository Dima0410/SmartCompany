@using SmartCompany.Authentication
@inherits LayoutComponentBase
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject UserAccountService userAccountService
@inject IJSRuntime js

<PageTitle>BlazorServerAuthenticationAndAuthorization</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>       
        <div class="text-end m-3 pe-3">
            <AuthorizeView>
                <NotAuthorized>
                    <button class="btn btn-outline-primary me-3" @onclick="CallModal">Войти</button>
                </NotAuthorized>
                <Authorized>
                    <a class="btn btn-outline-primary me-3" @onclick="Logout" href="javascript:void(0)">Выйти</a>
                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<LoginModal @ref="inputLogin" OnClose="OnClose" OnLogin="Authenticate" />



@code {
    private LoginModal? inputLogin;

    private void CallModal()
    {
        inputLogin?.Show();
    }

    private void OnClose()
    {
        inputLogin?.Hide();
    }


    private async Task Authenticate(List<string> loginList)
    {
        var userAccount = userAccountService.GetByUserName(loginList[0]);
        if (userAccount == null || userAccount.Password != loginList[1])
        {
            await js.InvokeVoidAsync("alert", "Неверное имя пользователя или пароль");
            inputLogin?.ClearInput();
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });
        navManager.NavigateTo("/", true);
    }


   private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navManager.NavigateTo("/", true);
    }
}